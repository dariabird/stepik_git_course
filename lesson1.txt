Первой командой, которую необходимо освоить для настройки репозиториев является команда git config

Эта утилита которая позволяет просматривать и настраивать параметры, контролирующие все аспекты работы Git’а, а также его внешний вид. Эти параметры могут быть сохранены в трёх местах:

Файл /etc/gitconfig содержит значения, общие для всех пользователей системы и для всех их репозиториев. Если при запуске git config указать параметр --system, то параметры будут читаться и сохраняться именно в этот файл.
Файл ~/.gitconfig или ~/.config/git/config хранит настройки конкретного пользователя. Этот файл используется при указании параметра --global.
Файл config в каталоге Git’а (т.е. .git/config) в том репозитории, который вы используете в данный момент, хранит настройки конкретного репозитория.
Настройки на каждом следующем уровне подменяют настройки из предыдущих уровней, то есть значения в .git/config перекрывают соответствующие значения в /etc/gitconfig.

В системах семейства Windows Git ищет файл .gitconfig в каталоге $HOME (C:\Users\$USER для большинства пользователей). Кроме того, Git ищет файл /etc/gitconfig, но уже относительно корневого каталога MSys, который находится там, куда вы решили установить Git, когда запускали инсталлятор.

Имя пользователя

Первое, что вам следует сделать после установки Git’а, — указать ваше имя и адрес электронной почты. Это важно, потому что каждый коммит в Git’е содержит эту информацию, и она включена в коммиты, передаваемые вами, и не может быть далее изменена:

$ git config --global user.name "John Doe"


email указывается аналогично.

Опять же, если указана опция --global, то эти настройки достаточно сделать только один раз, поскольку в этом случае Git будет использовать эти данные для всего, что вы делаете в этой системе. Если для каких-то отдельных проектов вы хотите указать другое имя или электронную почту, можно выполнить эту же команду без параметра --global в каталоге с нужным проектом.

Многие GUI-инструменты предлагают сделать это при первом запуске.



Выбор редактора

Теперь, когда вы указали своё имя, самое время выбрать текстовый редактор, который будет использоваться, если будет нужно набрать сообщение в Git’е. По умолчанию Git использует стандартный редактор вашей системы, которым обычно является Vim. Если вы хотите использовать другой текстовый редактор, например, Emacs, можно проделать следующее:

$ git config --global core.editor emacs
Warning
Vim и Emacs — популярные текстовые редакторы, которые часто используются разработчиками в Unix-подобных системах, таких как Linux и Mac. Если Вы не знакомы с каким-либо из этих редакторов или работаете на Windows-системе, вам, вероятно, потребуется инструкция по настройке используемого вами редактора для работы с Git. В случае, если вы не установили свой редактор и не знакомы с Vim или Emacs, вы можете попасть в затруднительное положение, когда они будут запущены.



Проверка настроек

Если вы хотите проверить используемую конфигурацию, можете использовать команду git config --list, чтобы показать все настройки, которые Git найдёт:

$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
Некоторые ключи (названия) настроек могут появиться несколько раз, потому что Git читает один и тот же ключ из разных файлов (например, из /etc/gitconfig и ~/.gitconfig). В этом случае Git использует последнее значение для каждого ключа.

Также вы можете проверить значение конкретного ключа, выполнив git config <key>:

Файлы, с которыми приходится иметь дело, когда речь идёт о работе с гитом, можно разделить на три группы: 

непроиндексированные файлы в локальном хранилище
проиндексированные файлы в локальном репозитории
проиндексированные файлы на удалённом сервере
Проиндексированный файл - это файл, за которым система git умеет следить: понимает, когда у него изменилось содержимое, имя, когда он удалён и прочее.

Когда в файловой системе создаётся новый файл, система git о нём ничего не знает до тех пор, пока он не будет проиндексирован. После индексации файл можно даже не отправлять на удалённый сервер, git уже будет хранить историю изменений этого файла.  Сохранение файла на удалённом сервере полезна, когда над проектом работают несколько человек, и есть необходимость обмениваться файлами.

Индексируются файлы после выполнения команды git commit, а отправляются на удалённый сервер после команды git push.
Переводить файлы можно из состояния 1 в 2, 2 в 3 и 3 в 2. Остальные операции невозможны. Невозможно добавить файл в индекс только на удалённом сервере, не проиндексировав его в локальном репозитории (прямой переход 1 в 3 невозможен). Также нельзя из состояний 2 или 3 перевести в состояние 1.
  

На этом этапе важно не путать систему контроля git и облачный сервер github.

Первое - это система контроля, которая управляется командами из консоли, которая хранит историю изменений файлов.

Второе - это всего лишь файловое хранилище, место, где могут хранится файлы. 
